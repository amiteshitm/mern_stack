{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","nameChange","e","setState","name","target","value","emailChange","email","passwordChange","password","state","users","id","axios","get","then","res","data","preventDefault","post","this","componentDidMount","put","delete","_id","className","onSubmit","handleSubmit","type","onChange","htmlFor","map","user","key","onClick","edit","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9cde0ebf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass App extends Component {\n constructor(props) {\n  super(props)\n\n  this.state = {\n     users:[],\n     id:0,\n     name:'',\n     email:'',\n     password:''\n  }\n}\n\ncomponentDidMount(){\n  axios.get('http://localhost/api')\n  .then((res)=>{\n    this.setState({\n      users:res.data,\n      id:0,\n      password:'',\n      email:'',\n      name:''    \n      })\n     \n  })\n  \n}\nnameChange=(e)=>{\n  this.setState({name:e.target.value})\n}\nemailChange=(e)=>{\n  this.setState({email:e.target.value})\n}\n\npasswordChange=(e)=>{\n  this.setState({password:e.target.value})\n}\nhandleSubmit(e,id){\n \n  e.preventDefault()\n  if(id===0){\n    axios.post(`http://localhost/api`,{ name:this.state.name,email:this.state.email,password:this.state.password})\n    .then(()=>{\n      this.componentDidMount()\n    })\n    \n  }else{\n    axios.put(`http://localhost/api/${id}`,{ name:this.state.name,email:this.state.email,password:this.state.password})\n    .then(()=>{\n      this.componentDidMount()\n    })\n  }\n    \n}\ndelete(id){\n  axios.delete(`http://localhost/api/${id}`)\n  .then(()=>{\n    this.componentDidMount()\n  })\n}\nedit(id){\n  axios.get(`http://localhost/api/${id}`)\n  .then((res)=>{\n    this.setState({\n      id:res.data._id,\n      name:res.data.name,\n      email:res.data.email,\n      password:res.data.password\n    })\n  })\n}\n  render() {\n\n    return (\n      <div>\n         <div className='row'>\n      <div className='col s6'>\n        <form onSubmit={(e)=>this.handleSubmit(e,this.state.id)}>\n          <div className=\"input-field col s12\">\n            <i className=\"material-icons prefix\">person</i>\n            <input type=\"text\" value={this.state.name} id=\"autocomplete-input\" className=\"autocomplete\" onChange={(e)=>this.nameChange(e)}/>\n            <label htmlFor=\"autocomplete-input\">Name</label>\n          </div>\n          <div className=\"input-field col s12\">\n            <i className=\"material-icons prefix\">email</i>\n            <input type=\"email\" id=\"autocomplete-input\" value={this.state.email}  className=\"autocomplete\" onChange={(e)=>this.emailChange(e)}/>\n            <label htmlFor=\"autocomplete-input\">Email</label>\n          </div>\n          <div className=\"input-field col s12\">\n            <i className=\"material-icons prefix\">vpn_key</i>\n            <input type=\"password\" id=\"autocomplete-input\"  value={this.state.password} className=\"autocomplete\" onChange={(e)=>this.passwordChange(e)}/>\n            <label htmlFor=\"autocomplete-input\">Password</label>\n          </div>\n          <button className=\"btn waves-effect waves-light right\" type=\"submit\" name=\"action\">Submit\n    <i className=\"material-icons right\">send</i>\n  </button>\n        </form>\n      </div>\n      <div className='col s6'>\n      <table>\n        <thead>\n          <tr>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Password</th>\n              <th>Edit</th>\n              <th>Delete</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {this.state.users.map(user=>\n          <tr key={user._id}>\n          <td>{user.name}</td>\n          <td>{user.email}</td>\n          <td>{user.password}</td>\n          <td>\n          <button onClick={()=>this.edit(user._id)} className=\"btn waves-effect waves-light right\" type=\"submit\" name=\"action\">\n  <i className=\"material-icons\">edit</i>\n  </button>\n\n          </td>\n          <td>\n           <button onClick={()=>this.delete(user._id)} className=\"btn waves-effect waves-light right\" type=\"submit\" name=\"action\">\n  <i className=\"material-icons\">delete</i>\n  </button>\n\n          </td>\n        </tr>\n            )}\n          \n          \n        </tbody>\n      </table>\n      </div>\n\n    </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}